何谓代码重构：
    1.（名词解释）：对软件内部的一种调整，目的是不改变【软件之可察行为】的前提下，提高其理解性，降低其修改成本。
        推出：重构的目的是：提高代码的理解性降低修改成本。
    2.（动词解释）：使用一系列的重构准则（手法），在不改变【软件之可察行为】的前提下，调整其结构。
性能的优化和代码的易理解程度往往是矛盾的。

为何重构：
    1.改进软件设计：
        （1）保持代码结构形态
        （2）消除重复代码
    2.软件更容易理解
    3.帮助找出bug
    4.提高编程速度

何时重构：（下面的三点都是为了让自己的代码结构更加的清晰）
    1.添加功能时
    2.修补错误时
    3.复审代码时

间接层和重构：
    大多数重构都是为程序引入更多的间接层（重构往往把大对象拆成小对象，把大型函数拆成小的函数）。
    间接层是把双刃剑，坏处列如：对象多次委托对象，对象管理变得复杂。
    间接层的价值：
        （1）允许逻辑的共享
        （2）分开解释【意图】和【实现】
        （3）将变化加以隔离
        （4）将条件逻辑加以编码（对象的多态消息机制）

重构的难题：
    1.数据库：
        对于nosql数据库的数据迁移，可以在object model 和database model之间加一层separate layer(分离层)，这样使得软件系统更加的灵活。
    2.修改接口：
    3.难以通过重构的手法完成的设计改动


============================================================================================
代码的坏味道
    1.重复的代码
    2.过长函数
    3.过大的类
    4.过长的参数
    5.发散式变化：希望软件能够容易修改，一旦需要修改就能跳到系统的某一点，只在该处做修改
    6.散弹式修改：与上刚好相反，如果每遇到某种变化，你都必须在许多的class内做出许多小修改以响应之，你所面临的坏味道就是散弹式修改
    7.依恋情节：函数对某个class的兴趣高于对自己所处之host class 的兴趣
    8.数据泥团





